# -*- coding: utf-8 -*-
"""MovieRecommendationSystem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vup25JEC_riZ4t7sHNSCdzGs953Inpfg
"""

import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer
from ipywidgets import interact, widgets

# Load the movie dataset
movies = pd.read_csv('/content/drive/MyDrive/IMDB Top 250 Movies.csv')

# Preprocess the data
movies['genre'] = movies['genre'].fillna('')

# Vectorize the genres
vectorizer = CountVectorizer()
genres_matrix = vectorizer.fit_transform(movies['genre'])

# Calculate cosine similarity between movies based on genres
cosine_sim = cosine_similarity(genres_matrix, genres_matrix)

# Function to recommend movies
def recommend(movie_title):
    # Get the index of the movie
    idx = movies[movies['name'] == movie_title].index[0]
    # Get the pairwise similarity scores
    sim_scores = list(enumerate(cosine_sim[idx]))
    # Sort the movies based on similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    # Get the top 10 similar movies
    sim_scores = sim_scores[1:11]
    # Get the movie indices
    movie_indices = [i[0] for i in sim_scores]
    # Return the top 10 recommended movies
    return movies['name'].iloc[movie_indices].tolist()

# Create a dropdown widget for movie selection
movie_dropdown = widgets.Dropdown(
    options=movies['name'].tolist(),
    description='Movie:',
    disabled=False,
)

# Define the recommendation function
def recommend_movies(movie):
    recommended_movies = recommend(movie)
    print("Recommended Movies:")
    for i, movie in enumerate(recommended_movies, 1):
        print(f"{i}. {movie}")

# Interact with the dropdown widget
interact(recommend_movies, movie=movie_dropdown);